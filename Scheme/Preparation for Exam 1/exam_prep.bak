(define (accumulate op nv a b term next)
  (if (> a b) nv
      (op (term a) (accumulate op nv (next a) b term next))))

(define (is-devisible x n)
  (if (= (modulo n x) 0) 1 0))

(define (is-prime? n)
  (if (= (accumulate + 0 2 (- n 1) (lambda (x) (is-devisible x n)) (lambda (x) (+ x 1))) 0) #t #f))

(define (sum-l l)
  (if (null? l) 0
      (+ (car l) (sum-l (cdr l)))))

(define (is-sorted? l)
  (if (or (null? l) (null? (cdr l))) #t
      (and (<= (car l) (car (cdr l))) (is-sorted? (cdr l)))))

(define (foldr op nv term l)
  (if (null? l) nv
      (op (term (car l)) (foldr op nv term (cdr l)))))