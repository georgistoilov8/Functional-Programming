;;; Списъци (list)

;;; Конструиране на наредена двойка:
;;; (cons <израз1> <израз2>
;;; Наредена двойка от оценките на <израз1> и <израз2>
;;; (car <израз>) - първият компонент на двойката, която е оценена на <израз>
;;; (cdr <израз>) - вторият компонент на двойката, която е оценена на <израз>
;;; (pair? <израз>) - проверява дали оценката на <израз> е наредена двойка

;;; Примери:
(cons (cons 2 3) (cons 8 13))
(cons 3 (cons (cons 13 21) 8))

;;; S-изрази:
;;; Дефиниция:
;;;   - атоми(булеви, числа, знаци, символи, низове, функции
;;;   - наредени двойки (S1 . S2), където S1 и S2 са S=изрази


;;; Списъци в Scheme
;;; Дефиниция:
;;;    1) Празният списък () е списък
;;;    2) (h . t) е списък ако t e списък
;;;        h - глава на списъка, t - опашка на списъка

;;; Вградени функции за списъци
;;; (null? <израз>) - дали <израз> е празния списък
(null? '(1 2 3))   ;;; -> #f
(null? '())        ;;; -> #t
;;; (list? <израз>) - дали <израз> е списък
;;; Празният списък е списък
(list? '(1 2 3))   ;;; -> #t
(list? '())        ;;; -> #t
(list? 2)          ;;; -> #f

;;; Дефиниране на функцията list?
(define (list2 l)
  (or (null? l) (and (pair? l) (list2 (cdr l)))))

;;; Построяване на списък
;;; (list <израз1> <израз2> ... <изразN>) <=> (cons <израз1> (cons <израз2> ... (cons <изразN> '()))...)
(list '(1 2 3) '(4 5 6))
(list 1 2 3 4 5 6)


;;; Глава на списък
;;; (car <списък>) - глава на <списък>
(car (list '(1 2 3) '(4 5 6)))
(car (list 1 2 3 4 5 6))

;;; Опашка на списък
;;; (cdr <списък>) - опашка на <списък>
(cdr (list '(1 2 3) '(4 5 6)))
(cdr (list 1 2 3 4 5 6))

;;; !!! () не е наредена двойка => не може да се извиква car и cdr над празния списък

;;; (car '()) => Грешка!, (cdr '()) => Грешка!
